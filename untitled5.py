# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j2KavVxIU0OVp55cb7P93MWfMv_1qntG
"""

import os
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import tarfile
from torchvision.datasets.utils import download_url
from torch.utils.data import random_split
import zipfile
from PIL import Image
import torchvision.transforms as transforms
import numpy as np
import pandas as pd
from torch.utils.data import Dataset
from torch.utils.data import DataLoader
from sklearn.model_selection import train_test_split
import torch.optim as optim
import zipfile
from torchvision import models

zip_file_path="/content/drive/MyDrive/deeplearning_warwick/warwick_qu_dataset_released_2016_07_08 (3).zip"
# /content/download?datasetVersionNumber=1
unjip_path="/content/warwick_data"

# Open the zip file
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    # Extract all the contents of the zip file to the output folder
    zip_ref.extractall(unjip_path)

data_dir = "/content/warwick_data/Warwick QU Dataset (Released 2016_07_08)"

# files = os.listdir(data_dir)

# test_files = [file for file in files if file.startswith('test')]
# train_files=[file for file in files if file.startswith('train')]

# print(test_files)
# print(train_files)
df=pd.read_csv("/content/warwick_data/Warwick QU Dataset (Released 2016_07_08)/Grade.csv")
df
# /content/warwick_data/Warwick QU Dataset (Released 2016_07_08)/+c+.bmp
# /content/warwick_data/Warwick QU Dataset (Released 2016_07_08)/testA_1.bmp

df.columns

list1,list2=[],[]
for ind in df.index:
    list1.append(f"/content/warwick_data/Warwick QU Dataset (Released 2016_07_08)/{df.iloc[ind]['name']}.bmp")
    list2.append(0 if (df[' grade (GlaS)'][ind]==" benign") else 1)
df1=pd.DataFrame({"source":list1, "label": list2})
df1.to_csv('meta.csv')

transform = transforms.Compose([
     # Resize the image to a square of size 224x224
    transforms.Resize((256, 256)),
    transforms.ToTensor(),
    transforms.Normalize(
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]
    )
    # Flatten()
])

from PIL import Image
class ColoData(Dataset):
    def __init__(self, meta_df_path, H=256, W=256):
        super(ColoData, self).__init__()
        self.meta_df = pd.read_csv(meta_df_path)
        self.H = H
        self.W = W

    def load_image(self, source):
        img = Image.open(source)
        img = img.resize((self.H, self.W), Image.ANTIALIAS)
        return img

    def __len__(self):
        return len(self.meta_df)

    def __getitem__(self, index):
        source = self.meta_df.iloc[index]['source']
        label = self.meta_df.iloc[index]['label']
        image = self.load_image(source)
        image = transform(image)
        return (image, label)

# from ColoData import ColoData

# Define the path to the CSV file and other parameters
meta_path = '/content/meta.csv'  # Provide the actual path
H = 256
W = 256

# Create an instance of ColoData
colodata = ColoData(meta_path, H=H, W=W)
train_df, test_df = train_test_split(colodata.meta_df, test_size=0.2, random_state=42)
train_df.to_csv("./train_df.csv")
test_df.to_csv("./test_df.csv")

train_dataset = ColoData("./train_df.csv", H=256, W=256)
test_dataset = ColoData("./test_df.csv", H=256, W=256)
# data=train_dataset.__getitem__(0);

# t_data=[]
# for image,label in train_dataset:
#  print(image)
# batch_size = 32
# dataloader = DataLoader(colodata, batch_size=batch_size, shuffle=True)
# train_ds, test_ds = torch.utils.data.random_split(dataset,[1 , 1] )
batch_size = 32
train_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
test_dataloader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

# train_dataloader
# print(type(train_dataset))
# train_dataset.__len__()
# test_dataset.__len__()

print(len(train_dataloader))
# for view in train_dataloader:
print(train_dataloader)
#     # Flatten the batch
    # flattened_batch = batch.view(batch.size(0), -1)
    # print(view.shape)
for batch in train_dataloader:
    # Batch is now flattened, and you can check its shape
    print("Flattened Batch Shape:", batch[0].shape)


# for value in train_dataloader:
#         print("hello")

# class CNNModel(nn.Module):
#     def __init__(self, num_classes):
#         super(CNNModel, self).__init__()
#         self.conv_layers = nn.Sequential(
#             nn.Conv2d(in_channels=3, out_channels=16, kernel_size=3, padding=1),
#             nn.ReLU(),
#             nn.MaxPool2d(kernel_size=2),
#             nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, padding=1),
#             nn.ReLU(),
#             nn.MaxPool2d(kernel_size=2)
#         )
#         self.fc_layers = nn.Sequential(
#             nn.Linear(32 * (H // 4) * (W // 4), 128),
#             nn.ReLU(),
#             nn.Linear(128, num_classes)
#         )
# num_features = 196608
class CNNModel(nn.Module):
    def __init__(self, num_classes):
        super(CNNModel, self).__init__()
        self.conv_layers = nn.Sequential(
            nn.Conv2d(3, 16, 3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Conv2d(16, 32, 3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Conv2d(32, 64, 3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )
        self.fc_layers = nn.Sequential(
            nn.Linear(64 * (H // 8) * (W // 8), 128),
            nn.ReLU(),
            nn.Linear(128, num_classes),

        )
        # self.fc_layers = nn.Sequential(
        #     nn.Linear(32,num_features ),  # Adjusted input features
        #     nn.ReLU(),
        #     nn.Linear(128, num_classes)
        # )


    def forward(self, x):
        x = self.conv_layers(x)
        x = x.view(x.size(0), -1)
        x = self.fc_layers(x)
        return x

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Load pre-trained MobileNetV2 model
model = models.mobilenet_v2(pretrained=True)

# Modify the last layer to match your number of classes (2 in your case - benign and malignant)
num_classes = 2
model.classifier[1] = nn.Linear(model.last_channel, num_classes)

# Move the model to the appropriate device
model = model.to(device)

# Define the loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

num_epochs = 5  # You can increase the number of epochs as needed

for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    for images, labels in train_dataloader:
        images, labels = images.to(device), labels.to(device)

        optimizer.zero_grad()

        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()

    print(f"Epoch {epoch+1}/{num_epochs}, Loss: {running_loss/len(train_dataloader)}")

# Validation loop
model.eval()
correct = 0
total = 0

with torch.no_grad():
    for images, labels in test_dataloader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

accuracy = correct / total
print(f"Validation Accuracy: {accuracy * 100:.2f}%")

# Create an instance of the CNN model
num_classes = 2
cnn_model = CNNModel(num_classes)

# Define loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(cnn_model.parameters(), lr=0.001)

# Training loop
num_epochs = 15
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
cnn_model.to(device)

# for values in train_dataset:
#         print(type(values))

for epoch in range(num_epochs):
    cnn_model.train()
    for image, label in train_dataloader:
        images, labels = image.to(device), label.to(device)
        if images.shape[0] == 32:
         print(f"Input Image shape: {images.shape}")
         print(f"Label shape: {labels.shape}")
         optimizer.zero_grad()
         outputs = cnn_model(images)  # Use "images" instead of "image"
        #  print(f"Output shape: {outputs.shape}")
         loss = criterion(outputs, labels)  # Use "labels" instead of "label"
         loss.backward()
         optimizer.step()

          # Perform some action when batch size is 32


    cnn_model.eval()
    total_correct = 0
    total_samples = 0
    with torch.no_grad():
      for image, label in test_dataloader:
            image, label = image.to(device), label.to(device)
            outputs = cnn_model(image)
            _, predicted = torch.max(outputs, 1)
            total_samples += label.size(0)
            total_correct += (predicted == label).sum().item()

    accuracy = total_correct / total_samples
    print(f'Epoch [{epoch+1}/{num_epochs}], Test Accuracy: {accuracy:.4f}')

print('Training complete!')